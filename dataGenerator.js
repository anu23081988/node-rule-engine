const fs = require('fs');
const { faker } = require('@faker-js/faker');

function generateMockData() {
    const customers = [];

    for (let i = 0; i < 20; i++) {
        const customer = {
            id: faker.datatype.uuid(),
            name: faker.name.fullName(),
            email: faker.internet.email(),
            phone: faker.phone.number(),
            address: faker.address.streetAddress(),
            city: faker.address.city(),
            state: faker.address.state(),
            zipCode: faker.address.zipCode(),
            country: faker.address.country(),
            companyName: faker.company.name(),
            address1: {
                country: faker.address.country(),
                state: faker.address.state(),
                city: faker.address.city()
            },
            jobTitle: faker.name.jobTitle(),
            dob: faker.date.birthdate({ min: 18, max: 65, mode: 'age' }).toISOString().split('T')[0],
            accountBalance: faker.finance.amount(),
            accountNumber: faker.finance.account(),
            creditCardNumber: faker.finance.creditCardNumber(),
            website: faker.internet.url(),
            username: faker.internet.userName(),
            password: faker.internet.password(),
            avatar: faker.image.avatar(),
            bio: faker.lorem.sentence(),
            createdAt: faker.date.past().toISOString(),
            updatedAt: faker.date.recent().toISOString(),
            lastLogin: faker.date.recent().toISOString(),
            isActive: faker.datatype.boolean(),
            gender: faker.name.sex(),
            maritalStatus: faker.helpers.arrayElement(['Single', 'Married', 'Divorced', 'Widowed']),
            ssn: faker.datatype.uuid(),
            drivingLicense: faker.datatype.uuid(),
            passportNumber: faker.datatype.uuid(),
            nationality: faker.address.country(),
            languages: faker.lorem.words(3).split(' '),
            interests: faker.lorem.words(5).split(' '),
            education: faker.lorem.words(3).split(' '),
            profession: faker.name.jobTitle(),
            employer: faker.company.name(),
            hireDate: faker.date.past(20).toISOString().split('T')[0],
            terminationDate: faker.date.recent(5).toISOString().split('T')[0],
            salary: faker.finance.amount(),
            bonus: faker.finance.amount(),
            department: faker.commerce.department(),
            officeLocation: faker.address.city(),
            workPhone: faker.phone.number(),
            workEmail: faker.internet.email(),
            emergencyContactName: faker.name.fullName(),
            emergencyContactPhone: faker.phone.number(),
            emergencyContactRelation: faker.name.jobTitle(),
            preferredContactMethod: faker.helpers.arrayElement(['Email', 'Phone', 'SMS']),
            preferredLanguage: faker.helpers.arrayElement(['English', 'Spanish', 'French', 'German', 'Chinese']),
            timezone: faker.address.timeZone(),
            subscriptionPlan: faker.helpers.arrayElement(['Free', 'Basic', 'Premium', 'Enterprise']),
            subscriptionStartDate: faker.date.past(2).toISOString().split('T')[0],
            subscriptionEndDate: faker.date.future(2).toISOString().split('T')[0],
            isShipAddSameAsBilling: faker.datatype.boolean(),
            billingAddress: faker.address.streetAddress(),
            billingCity: faker.address.city(),
            billingState: faker.address.state(),
            billingZipCode: faker.address.zipCode(),
            billingCountry: faker.address.country(),
            shippingAddress: faker.address.streetAddress(),
            shippingCity: faker.address.city(),
            shippingState: faker.address.state(),
            shippingZipCode: faker.address.zipCode(),
            shippingCountry: faker.address.country(),
            paymentMethod: faker.finance.transactionType(),
            cardExpiryDate: faker.date.future().toISOString().split('T')[0],
            cardCVV: faker.finance.creditCardCVV(),
            paypalId: faker.internet.email(),
            amazonPayId: faker.internet.email(),
            googlePayId: faker.internet.email(),
            applePayId: faker.internet.email(),
            linkedIn: faker.internet.url(),
            twitter: faker.internet.url(),
            facebook: faker.internet.url(),
            instagram: faker.internet.url(),
            youtube: faker.internet.url(),
            tiktok: faker.internet.url(),
            github: faker.internet.url(),
            blog: faker.internet.url(),
            preferences: faker.lorem.sentence(),
            privacySettings: faker.lorem.sentence(),
            notificationSettings: faker.lorem.sentence(),
            securityQuestions: [
                {
                    question: faker.lorem.sentence(),
                    answer: faker.lorem.word(),
                },
                {
                    question: faker.lorem.sentence(),
                    answer: faker.lorem.word(),
                },
                {
                    question: faker.lorem.sentence(),
                    answer: faker.lorem.word(),
                },
            ],
            rewardPoints: faker.datatype.number(),
            membershipStatus: faker.helpers.arrayElement(['Bronze', 'Silver', 'Gold', 'Platinum']),
            loyaltyTier: faker.helpers.arrayElement(['Tier 1', 'Tier 2', 'Tier 3', 'Tier 4']),
            lastPurchaseDate: faker.date.recent(30).toISOString().split('T')[0],
            favoriteProduct: faker.commerce.productName(),
            favoriteCategory: faker.commerce.department(),
            lifetimeValue: faker.finance.amount(),
            averageOrderValue: faker.finance.amount(),
            totalOrders: faker.datatype.number(),
            totalSpent: faker.finance.amount(),
            couponUsed: faker.helpers.arrayElement(['Yes', 'No']),
            referralSource: faker.company.name(),
            referredFriends: faker.datatype.number(),
            feedbackScore: faker.datatype.number({ min: 1, max: 10 }),
            notes: faker.lorem.sentences(2),
            // Adding new fields to reach 100
            fax: faker.phone.number(),
            mobilePhone: faker.phone.number(),
            skype: faker.internet.userName(),
            additionalEmail: faker.internet.email(),
            homeAddress: faker.address.streetAddress(),
            homeCity: faker.address.city(),
            homeState: faker.address.state(),
            homeZipCode: faker.address.zipCode(),
            homeCountry: faker.address.country(),
            officeAddress: faker.address.streetAddress(),
            officeCity: faker.address.city(),
            officeState: faker.address.state(),
            officeZipCode: faker.address.zipCode(),
            officeCountry: faker.address.country(),
            secondaryPhone: faker.phone.number(),
            secondaryEmail: faker.internet.email(),
            preferredCurrency: faker.finance.currencyCode(),
            preferredPaymentMethod: faker.helpers.arrayElement(['Credit Card', 'Paypal', 'Bank Transfer']),
            discountCode: faker.random.alphaNumeric(10),
            orderHistory: Array.from({ length: 5 }, () => ({
                orderId: faker.datatype.uuid(),
                orderDate: faker.date.past().toISOString().split('T')[0],
                orderAmount: faker.finance.amount(),
                orderStatus: faker.helpers.arrayElement(['Processing', 'Shipped', 'Delivered', 'Cancelled']),
            })),
            wishlist: Array.from({ length: 5 }, () => faker.commerce.productName()),
            viewedItems: Array.from({ length: 5 }, () => faker.commerce.productName()),
            cartItems: Array.from({ length: 5 }, () => ({
                itemId: faker.datatype.uuid(),
                itemName: faker.commerce.productName(),
                itemPrice: faker.finance.amount(),
                itemQuantity: faker.datatype.number({ min: 1, max: 5 }),
            })),
            shippingPreferences: faker.lorem.sentence(),
            billingPreferences: faker.lorem.sentence(),
            socialMediaHandles: {
                facebook: faker.internet.url(),
                twitter: faker.internet.url(),
                linkedin: faker.internet.url(),
                instagram: faker.internet.url(),
                youtube: faker.internet.url(),
            },
            emergencyContactAddress: faker.address.streetAddress(),
            emergencyContactCity: faker.address.city(),
            emergencyContactState: faker.address.state(),
            emergencyContactZipCode: faker.address.zipCode(),
            emergencyContactCountry: faker.address.country(),
            preferredNotificationTime: faker.datatype.datetime().toISOString(),
            preferredShoppingTime: faker.datatype.datetime().toISOString(),
            lastActivity: faker.date.recent().toISOString(),
            loginCount: faker.datatype.number(),
            subscriptionRenewalDate: faker.date.future().toISOString().split('T')[0],
            loyaltyPoints: faker.datatype.number(),
            accountType: faker.helpers.arrayElement(['Standard', 'Premium', 'VIP']),
            secondaryAddress: faker.address.streetAddress(),
            secondaryCity: faker.address.city(),
            secondaryState: faker.address.state(),
            secondaryZipCode: faker.address.zipCode(),
            secondaryCountry: faker.address.country(),
            emergencyContactEmail: faker.internet.email(),
            favoriteBrand: faker.company.name(),
            browser: faker.internet.userAgent(),
            operatingSystem: faker.helpers.arrayElement(['Windows', 'MacOS', 'Linux']),
            device: faker.helpers.arrayElement(['Mobile', 'Tablet', 'Desktop']),
            purchaseFrequency: faker.helpers.arrayElement(['Daily', 'Weekly', 'Monthly', 'Yearly']),
            avgSessionDuration: faker.datatype.number({ min: 1, max: 300 }) + ' seconds',
            timeSpentOnSite: faker.datatype.number({ min: 1, max: 1000 }) + ' minutes',
        };
        customers.push(customer);
    }

    return customers;
}

const mockData = generateMockData();
console.log(JSON.stringify(mockData, null, 2));

console.log(JSON.stringify(Object.keys(mockData[0])))

fs.writeFile('mockData.json', JSON.stringify(mockData, null, 2), err => {
    if (err) throw err;
    console.log('data generated successfully');
});


fs.writeFile('mockData.json', JSON.stringify(mockData, null, 2), err => {
    if (err) throw err;
    console.log('data generated successfully');
});
